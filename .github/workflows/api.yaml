on:
  push:
    paths: ["apps/api/**", ".github/workflows/api.yaml"]
  pull_request:
    paths: [ "apps/api/**", ".github/workflows/api.yaml" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    services:
      db:
        image: postgres:12
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        version-type: strict
        version-file: apps/api/.tool-versions

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-elixir-deps
      with:
        path: apps/api/deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-

    - name: Cache compiled build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-compiled-build
      with:
        path: apps/api/_build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-

    - name: Clean to rule out incremental build as a source of flakiness
      if: github.run_attempt != '1'
      run: |
        mix deps.clean --all
        mix clean
      shell: sh

    - name: Install dependencies
      run: mix deps.get

    - name: Compiles without warnings
      run: mix compile

    - name: Mix check
      run: mix check --except compiler

  deploy-canary:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build]
    environment: 
      name: canary
      url: https://canary-api.flirtual.com
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: |
          flyctl config show -a flirtual | jq '
            .app = "flirtual-canary" |
            .deploy.strategy = "immediate" |
            .services[0].auto_stop_machines = true |
            .services[0].auto_start_machines = true |
            .services[0].min_machines_running = 0 |
            .vm[0].size = "shared-cpu-2x"
          ' > fly-canary.json

          GIT_COMMIT_SHA=$(git rev-parse HEAD)

          flyctl deploy \
            -c fly-canary.json \
            --remote-only \
            --update-only \
            --env CANARY=1 \
            --env GIT_COMMIT_SHA="$GIT_COMMIT_SHA"
        working-directory: ./apps/api
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-production:
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    needs: [build]
    environment: 
      name: Production
      url: https://api.flirtu.al
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: |
          GIT_COMMIT_SHA=$(git rev-parse HEAD)
          flyctl deploy --remote-only --env GIT_COMMIT_SHA="$GIT_COMMIT_SHA"
        working-directory: ./apps/api
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
